// Estruturas Condicionais

> if | Executa um bloco de código se a condição for verdadeira.

> if...else | Executa um bloco se for verdadeiro e outro se for falso.

> else if | Permite múltiplas verificações condicionais em sequência

-----------------------------------------------------------------------------

// Estruturas de repetição

> While | Executa o bloco enquanto a condição for verdadeira.

> For | Laço com controle de início, condição e incremento.

-----------------------------------------------------------------------------

// Template Strings e Switch Break e Continue

> Template String | Permite interpolar váriaveis em strings com crase (`).

> Break | Interrompe um laço ou switch quando necessário.

> Switch | Estrutura para múltiplas condições baseadas em um valor.

> Continue | Pula a interação atual e continua o laço











¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨


// Funções em JS

Função X Algoritmo
Função : Dá nome ao bloco de código e os reutiliza.
Algoritmo : Execução de pequenos programas, linhas ou códigos.


¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
// Funções com return

Funções podem retornar valores com a palavra-chaves return. Isso permite reutilizar o resultado da funçao em outro ponto do código.

--------------------------------------------------------------------

Armazenando Funções em Variáveis

Em JavaScript, funções são "passageiros de primeira classe", o que significa que podem ser atribuídas a variáveis,
passadas como argumentos e retornadas de outras funções.

---------------------------------------------------------------------

Passando funções como Parâmetro

Você pode passar uma função como argumento para outra função. Isso também pode ser chamado como callbacks.

---------------------------------------------------------------------

Retornando Funções

Uma função pode retornar outra função. Isso permite criar funções personalizadas ou usar técnicas como closures.

--------------------------------------------------------------------

 | Conceito          |       Explicação rápida
Função com retorno      |     Usa 'return' para enviar um valor de volta
Função com variável      |    Função anônima armazenada em variável
Função como parâmetro     |   Permite comportamento dinâmico (callbacks)
Função que retorna função  |  Gera funções personalizadas, conceito de closure


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

O que é um Array?

Um array é uma estrutura de dados que armazena uma coleção de elementos (valores), acessíveis por índices numéricos.
Em JavaScript, arrays são objetos especiais com métodos e propriedades específicas.

const frutas = ['Maçã', 'Banana', 'Uva'];
console.log(frutas[0]); // Maçã

              0    1    2    3
var notas = [9.7, 8.9, 6.5, 7.2]

------------------------------------------------------------------------------

Índices e elementos

Os índices começam do 0.
É possível acessar, modificar e até mesmp croar índices "pulando posições".

frutas[3] = 'Abacaxi'; // Adiciona na posição 3

------------------------------------------------------------------------------

A Propriedade Length

Representa a quantidade de elementos no array.

Essa propriedade é muito útil em loops e validações.

console.log(frutas.length); // 4

for(let i = 0; frutas.length 3; i++) {
console.log(frutas []);
}



push()    Adiciona elementos no final
pop()     Remove o último elemento
splice()  Remove ou substitui elementos
concat()  Concatena dois arrays
includes() Verifica se um valor está presente
indexOf() Retorna o índice de um valor
join()    Junta elementos de uma string
forEach() Itera sobre os elementos

for...of > RETORNA OS VALORES DO ARRAY 
for...in > RETORNA OS INDICES DO ARRAY